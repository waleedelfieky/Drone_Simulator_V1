// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Obstacles.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__OBSTACLES_HPP
#define FAST_DDS_GENERATED__OBSTACLES_HPP

#include <cstdint>
#include <utility>
#include <vector>


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(OBSTACLES_SOURCE)
#define OBSTACLES_DllAPI __declspec( dllexport )
#else
#define OBSTACLES_DllAPI __declspec( dllimport )
#endif // OBSTACLES_SOURCE
#else
#define OBSTACLES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define OBSTACLES_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure Obstacles defined by the user in the IDL file.
 * @ingroup Obstacles
 */
class Obstacles
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Obstacles()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Obstacles()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Obstacles that will be copied.
     */
    eProsima_user_DllExport Obstacles(
            const Obstacles& x)
    {
                    m_obstacles_x = x.m_obstacles_x;

                    m_obstacles_y = x.m_obstacles_y;

                    m_obstacles_number = x.m_obstacles_number;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Obstacles that will be copied.
     */
    eProsima_user_DllExport Obstacles(
            Obstacles&& x) noexcept
    {
        m_obstacles_x = std::move(x.m_obstacles_x);
        m_obstacles_y = std::move(x.m_obstacles_y);
        m_obstacles_number = x.m_obstacles_number;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Obstacles that will be copied.
     */
    eProsima_user_DllExport Obstacles& operator =(
            const Obstacles& x)
    {

                    m_obstacles_x = x.m_obstacles_x;

                    m_obstacles_y = x.m_obstacles_y;

                    m_obstacles_number = x.m_obstacles_number;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Obstacles that will be copied.
     */
    eProsima_user_DllExport Obstacles& operator =(
            Obstacles&& x) noexcept
    {

        m_obstacles_x = std::move(x.m_obstacles_x);
        m_obstacles_y = std::move(x.m_obstacles_y);
        m_obstacles_number = x.m_obstacles_number;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Obstacles object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Obstacles& x) const
    {
        return (m_obstacles_x == x.m_obstacles_x &&
           m_obstacles_y == x.m_obstacles_y &&
           m_obstacles_number == x.m_obstacles_number);
    }

    /*!
     * @brief Comparison operator.
     * @param x Obstacles object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Obstacles& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member obstacles_x
     * @param _obstacles_x New value to be copied in member obstacles_x
     */
    eProsima_user_DllExport void obstacles_x(
            const std::vector<int32_t>& _obstacles_x)
    {
        m_obstacles_x = _obstacles_x;
    }

    /*!
     * @brief This function moves the value in member obstacles_x
     * @param _obstacles_x New value to be moved in member obstacles_x
     */
    eProsima_user_DllExport void obstacles_x(
            std::vector<int32_t>&& _obstacles_x)
    {
        m_obstacles_x = std::move(_obstacles_x);
    }

    /*!
     * @brief This function returns a constant reference to member obstacles_x
     * @return Constant reference to member obstacles_x
     */
    eProsima_user_DllExport const std::vector<int32_t>& obstacles_x() const
    {
        return m_obstacles_x;
    }

    /*!
     * @brief This function returns a reference to member obstacles_x
     * @return Reference to member obstacles_x
     */
    eProsima_user_DllExport std::vector<int32_t>& obstacles_x()
    {
        return m_obstacles_x;
    }


    /*!
     * @brief This function copies the value in member obstacles_y
     * @param _obstacles_y New value to be copied in member obstacles_y
     */
    eProsima_user_DllExport void obstacles_y(
            const std::vector<int32_t>& _obstacles_y)
    {
        m_obstacles_y = _obstacles_y;
    }

    /*!
     * @brief This function moves the value in member obstacles_y
     * @param _obstacles_y New value to be moved in member obstacles_y
     */
    eProsima_user_DllExport void obstacles_y(
            std::vector<int32_t>&& _obstacles_y)
    {
        m_obstacles_y = std::move(_obstacles_y);
    }

    /*!
     * @brief This function returns a constant reference to member obstacles_y
     * @return Constant reference to member obstacles_y
     */
    eProsima_user_DllExport const std::vector<int32_t>& obstacles_y() const
    {
        return m_obstacles_y;
    }

    /*!
     * @brief This function returns a reference to member obstacles_y
     * @return Reference to member obstacles_y
     */
    eProsima_user_DllExport std::vector<int32_t>& obstacles_y()
    {
        return m_obstacles_y;
    }


    /*!
     * @brief This function sets a value in member obstacles_number
     * @param _obstacles_number New value for member obstacles_number
     */
    eProsima_user_DllExport void obstacles_number(
            int32_t _obstacles_number)
    {
        m_obstacles_number = _obstacles_number;
    }

    /*!
     * @brief This function returns the value of member obstacles_number
     * @return Value of member obstacles_number
     */
    eProsima_user_DllExport int32_t obstacles_number() const
    {
        return m_obstacles_number;
    }

    /*!
     * @brief This function returns a reference to member obstacles_number
     * @return Reference to member obstacles_number
     */
    eProsima_user_DllExport int32_t& obstacles_number()
    {
        return m_obstacles_number;
    }



private:

    std::vector<int32_t> m_obstacles_x;
    std::vector<int32_t> m_obstacles_y;
    int32_t m_obstacles_number{0};

};

#endif // _FAST_DDS_GENERATED_OBSTACLES_HPP_


