// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Targets.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__TARGETS_HPP
#define FAST_DDS_GENERATED__TARGETS_HPP

#include <cstdint>
#include <utility>
#include <vector>


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TARGETS_SOURCE)
#define TARGETS_DllAPI __declspec( dllexport )
#else
#define TARGETS_DllAPI __declspec( dllimport )
#endif // TARGETS_SOURCE
#else
#define TARGETS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TARGETS_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure Targets defined by the user in the IDL file.
 * @ingroup Targets
 */
class Targets
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Targets()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Targets()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Targets that will be copied.
     */
    eProsima_user_DllExport Targets(
            const Targets& x)
    {
                    m_targets_x = x.m_targets_x;

                    m_targets_y = x.m_targets_y;

                    m_targets_number = x.m_targets_number;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Targets that will be copied.
     */
    eProsima_user_DllExport Targets(
            Targets&& x) noexcept
    {
        m_targets_x = std::move(x.m_targets_x);
        m_targets_y = std::move(x.m_targets_y);
        m_targets_number = x.m_targets_number;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Targets that will be copied.
     */
    eProsima_user_DllExport Targets& operator =(
            const Targets& x)
    {

                    m_targets_x = x.m_targets_x;

                    m_targets_y = x.m_targets_y;

                    m_targets_number = x.m_targets_number;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Targets that will be copied.
     */
    eProsima_user_DllExport Targets& operator =(
            Targets&& x) noexcept
    {

        m_targets_x = std::move(x.m_targets_x);
        m_targets_y = std::move(x.m_targets_y);
        m_targets_number = x.m_targets_number;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Targets object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Targets& x) const
    {
        return (m_targets_x == x.m_targets_x &&
           m_targets_y == x.m_targets_y &&
           m_targets_number == x.m_targets_number);
    }

    /*!
     * @brief Comparison operator.
     * @param x Targets object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Targets& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member targets_x
     * @param _targets_x New value to be copied in member targets_x
     */
    eProsima_user_DllExport void targets_x(
            const std::vector<int32_t>& _targets_x)
    {
        m_targets_x = _targets_x;
    }

    /*!
     * @brief This function moves the value in member targets_x
     * @param _targets_x New value to be moved in member targets_x
     */
    eProsima_user_DllExport void targets_x(
            std::vector<int32_t>&& _targets_x)
    {
        m_targets_x = std::move(_targets_x);
    }

    /*!
     * @brief This function returns a constant reference to member targets_x
     * @return Constant reference to member targets_x
     */
    eProsima_user_DllExport const std::vector<int32_t>& targets_x() const
    {
        return m_targets_x;
    }

    /*!
     * @brief This function returns a reference to member targets_x
     * @return Reference to member targets_x
     */
    eProsima_user_DllExport std::vector<int32_t>& targets_x()
    {
        return m_targets_x;
    }


    /*!
     * @brief This function copies the value in member targets_y
     * @param _targets_y New value to be copied in member targets_y
     */
    eProsima_user_DllExport void targets_y(
            const std::vector<int32_t>& _targets_y)
    {
        m_targets_y = _targets_y;
    }

    /*!
     * @brief This function moves the value in member targets_y
     * @param _targets_y New value to be moved in member targets_y
     */
    eProsima_user_DllExport void targets_y(
            std::vector<int32_t>&& _targets_y)
    {
        m_targets_y = std::move(_targets_y);
    }

    /*!
     * @brief This function returns a constant reference to member targets_y
     * @return Constant reference to member targets_y
     */
    eProsima_user_DllExport const std::vector<int32_t>& targets_y() const
    {
        return m_targets_y;
    }

    /*!
     * @brief This function returns a reference to member targets_y
     * @return Reference to member targets_y
     */
    eProsima_user_DllExport std::vector<int32_t>& targets_y()
    {
        return m_targets_y;
    }


    /*!
     * @brief This function sets a value in member targets_number
     * @param _targets_number New value for member targets_number
     */
    eProsima_user_DllExport void targets_number(
            int32_t _targets_number)
    {
        m_targets_number = _targets_number;
    }

    /*!
     * @brief This function returns the value of member targets_number
     * @return Value of member targets_number
     */
    eProsima_user_DllExport int32_t targets_number() const
    {
        return m_targets_number;
    }

    /*!
     * @brief This function returns a reference to member targets_number
     * @return Reference to member targets_number
     */
    eProsima_user_DllExport int32_t& targets_number()
    {
        return m_targets_number;
    }



private:

    std::vector<int32_t> m_targets_x;
    std::vector<int32_t> m_targets_y;
    int32_t m_targets_number{0};

};

#endif // _FAST_DDS_GENERATED_TARGETS_HPP_


