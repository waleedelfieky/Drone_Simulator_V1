// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TargetsTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "TargetsTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Targets.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_Targets_type_identifier(
        TypeIdentifierPair& type_ids_Targets)
{

    ReturnCode_t return_code_Targets {eprosima::fastdds::dds::RETCODE_OK};
    return_code_Targets =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "Targets", type_ids_Targets);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_Targets)
    {
        StructTypeFlag struct_flags_Targets = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_Targets = "Targets";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Targets;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Targets;
        CompleteTypeDetail detail_Targets = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Targets, ann_custom_Targets, type_name_Targets.to_string());
        CompleteStructHeader header_Targets;
        header_Targets = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_Targets);
        CompleteStructMemberSeq member_seq_Targets;
        {
            TypeIdentifierPair type_ids_targets_x;
            ReturnCode_t return_code_targets_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_targets_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int32_t_unbounded", type_ids_targets_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_targets_x)
            {
                return_code_targets_x =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_targets_x);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_targets_x)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_targets_x, element_identifier_anonymous_sequence_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int32_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_targets_x.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int32_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_unbounded, element_flags_anonymous_sequence_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_unbounded", type_ids_targets_x))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_targets_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_targets_x = 0x00000000;
            bool common_targets_x_ec {false};
            CommonStructMember common_targets_x {TypeObjectUtils::build_common_struct_member(member_id_targets_x, member_flags_targets_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_targets_x, common_targets_x_ec))};
            if (!common_targets_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure targets_x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_targets_x = "targets_x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_targets_x;
            ann_custom_Targets.reset();
            CompleteMemberDetail detail_targets_x = TypeObjectUtils::build_complete_member_detail(name_targets_x, member_ann_builtin_targets_x, ann_custom_Targets);
            CompleteStructMember member_targets_x = TypeObjectUtils::build_complete_struct_member(common_targets_x, detail_targets_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_Targets, member_targets_x);
        }
        {
            TypeIdentifierPair type_ids_targets_y;
            ReturnCode_t return_code_targets_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_targets_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int32_t_unbounded", type_ids_targets_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_targets_y)
            {
                return_code_targets_y =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_targets_y);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_targets_y)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                bool element_identifier_anonymous_sequence_int32_t_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_int32_t_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_targets_y, element_identifier_anonymous_sequence_int32_t_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_int32_t_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int32_t_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_targets_y.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int32_t_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int32_t_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_int32_t_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_unbounded, element_flags_anonymous_sequence_int32_t_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_unbounded", type_ids_targets_y))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_targets_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_targets_y = 0x00000001;
            bool common_targets_y_ec {false};
            CommonStructMember common_targets_y {TypeObjectUtils::build_common_struct_member(member_id_targets_y, member_flags_targets_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_targets_y, common_targets_y_ec))};
            if (!common_targets_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure targets_y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_targets_y = "targets_y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_targets_y;
            ann_custom_Targets.reset();
            CompleteMemberDetail detail_targets_y = TypeObjectUtils::build_complete_member_detail(name_targets_y, member_ann_builtin_targets_y, ann_custom_Targets);
            CompleteStructMember member_targets_y = TypeObjectUtils::build_complete_struct_member(common_targets_y, detail_targets_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_Targets, member_targets_y);
        }
        {
            TypeIdentifierPair type_ids_targets_number;
            ReturnCode_t return_code_targets_number {eprosima::fastdds::dds::RETCODE_OK};
            return_code_targets_number =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_targets_number);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_targets_number)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "targets_number Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_targets_number = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_targets_number = 0x00000002;
            bool common_targets_number_ec {false};
            CommonStructMember common_targets_number {TypeObjectUtils::build_common_struct_member(member_id_targets_number, member_flags_targets_number, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_targets_number, common_targets_number_ec))};
            if (!common_targets_number_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure targets_number member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_targets_number = "targets_number";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_targets_number;
            ann_custom_Targets.reset();
            CompleteMemberDetail detail_targets_number = TypeObjectUtils::build_complete_member_detail(name_targets_number, member_ann_builtin_targets_number, ann_custom_Targets);
            CompleteStructMember member_targets_number = TypeObjectUtils::build_complete_struct_member(common_targets_number, detail_targets_number);
            TypeObjectUtils::add_complete_struct_member(member_seq_Targets, member_targets_number);
        }
        CompleteStructType struct_type_Targets = TypeObjectUtils::build_complete_struct_type(struct_flags_Targets, header_Targets, member_seq_Targets);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_Targets, type_name_Targets.to_string(), type_ids_Targets))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Targets already registered in TypeObjectRegistry for a different type.");
        }
    }
}

